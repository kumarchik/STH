from pygame import draw, transform, image  # =================== ЗМІНА 1: Розширено імпорти ===================
# Пояснення: Імпортуємо необхідні модулі з Pygame.
# **draw** для малювання геометричних фігур (наприклад, прямокутників клавіш).
# **transform** для зміни розміру зображень (нот).
# **image** для завантаження зображень (нот).
from settings import BLACK  # Пояснення: Імпортуємо константу кольору BLACK з файлу налаштувань.

# =================== ЗМІНА 2: ДОДАНО 25 рядків картинок нот ===================
# --- Картинки нот (додаємо всі ноти) ---

# Завантаження зображень нот, зміна їх розміру до (50x50) пікселів та збереження у константи.
C_IMG = transform.scale(image.load('assets/images/notes/c.png'), (50, 50))
D_IMG = transform.scale(image.load('assets/images/notes/d.png'), (50, 50))
E_IMG = transform.scale(image.load('assets/images/notes/e.png'), (50, 50))
F_IMG = transform.scale(image.load('assets/images/notes/c.png'), (50, 50))
G_IMG = transform.scale(image.load('assets/images/notes/d.png'), (50, 50))
A_IMG = transform.scale(image.load('assets/images/notes/e.png'), (50, 50))
B_IMG = transform.scale(image.load('assets/images/notes/c.png'), (50, 50))

NOTE_IMAGES = {
    'C': C_IMG,
    'D': D_IMG,
    'E': E_IMG,
    'F': F_IMG,
    'G': G_IMG,
    'A': A_IMG,
    'B': B_IMG,
}  # Пояснення: **Словник** для швидкого доступу до об'єктів зображень нот
   # за їхнім буквеним позначенням ('C', 'D', 'E' і т.д.).

# =================== ЗМІНА 3: ДОДАНО глобальний список ===================
_FLYING_NOTES = []  # Пояснення: **Глобальний список**, який зберігає словники з параметрами
                    # усіх активних "літаючих" нот (ті, що анімуються вгору після натискання клавіші).
                    # Кожен елемент - словник з ключами 'img', 'x', 'y', 'vy'.

# =================== ЗМІНА 4: ДОДАНО функцію створення ноти ===================
def spawn_flying_note(rect, note_name: str | None):
    # Пояснення: Функція для створення (ініціалізації) нової літаючої ноти.
    # **rect**: Прямокутник (Rect) клавіші, над якою має з'явитися нота.
    # **note_name**: Назва ноти ('C', 'D', і т.д.) або None.
    if not note_name:
        return
    # Отримуємо зображення ноти зі словника NOTE_IMAGES.
    img = NOTE_IMAGES.get(note_name)
    if not img:
        return
    # Обчислюємо початкові координати для центрування ноти над клавішею.
    # x: Центр клавіші (rect.centerx) мінус половина ширини зображення.
    x = rect.centerx - img.get_width() // 2
    # y: Верх клавіші (rect.y) мінус висота зображення, мінус додатковий відступ (10 пікселів).
    y = rect.y - img.get_height() - 10
    # Додаємо нову ноту до списку _FLYING_NOTES.
    # 'vy': вертикальна швидкість (-1 означає рух вгору, оскільки Y зменшується вгору).
    _FLYING_NOTES.append({'img': img, 'x': x, 'y': y, 'vy': -1})
    # Пояснення: Створює нотку над клавішею, яка летить вгору (рух вгору).

# =================== ЗМІНА 5: ДОДАНО функцію анімації ===================
def update_and_draw_flying_notes(screen):
    # Пояснення: Функція, яка відповідає за анімацію та відображення всіх активних літаючих нот.
    # **screen**: Поверхня Pygame, на якій відбувається малювання.
    to_remove = [] # Список для нот, які потрібно видалити.
    for n in _FLYING_NOTES:
        n['y'] += n['vy']  # Оновлення позиції Y (рух вгору, бо vy = -1).
        screen.blit(n['img'], (n['x'], n['y'])) # Малювання ноти на екрані.
        # Перевірка, чи нота повністю вийшла за верхній край екрана (Y < 0).
        if n['y'] + n['img'].get_height() < 0:
            to_remove.append(n)
    # Видалення нот, які вийшли за межі екрана, щоб звільнити пам'ять та припинити їх обробку.
    for n in to_remove:
        _FLYING_NOTES.remove(n)
    # Пояснення: **Оновлює** позиції, **малює** ноти та **видаляє** ті, що вийшли за межі екрана.

def draw_key_effect(screen, rect, is_pressed=False, note=None):  # =================== ЗМІНА 6: +параметр note ===================
    # Пояснення: Функція для малювання ефекту клавіші. Тепер приймає назву ноти.
    # **note**: Назва ноти (наприклад, 'C') або None.
    # Викликаємо функцію створення літаючої ноти, якщо клавіша натиснута.
    if is_pressed and note:
        spawn_flying_note(rect, note) # Виклик функції зі ЗМІНИ 4.
    
    # Визначення кольору клавіші залежно від її стану (натиснута чи ні).
    if not is_pressed:
        base_color = (220, 220, 220) # Світло-сірий для ненатиснутої.
    else:
        base_color = (170, 220, 255) # Світло-блакитний для натиснутої.

    # Малювання прямокутника клавіші з заокругленими кутами.
    draw.rect(screen, base_color, rect, border_radius=8)
    # Малювання чорної рамки навколо клавіші.
    draw.rect(screen, BLACK, rect, 2, border_radius=8)
    # Пояснення: БАЗОВА логіка клавіші: малювання кольорового фону та чорної рамки.